import { HttpClient } from '@angular/common/http';
import { AccountCreationData } from '../interfaces';
import { default as HyperionStreamClient } from '@eosrio/hyperion-stream-client';
import { MatTableDataSource } from '@angular/material/table';
import { PaginationService } from './pagination.service';
export declare class AccountService {
    private httpClient;
    private pagService;
    getAccountUrl: string;
    getActionsUrl: string;
    getCreatorUrl: string;
    getTxUrl: string;
    getBlockUrl: string;
    getKeyUrl: string;
    jsonData: any;
    account: any;
    actions: any[];
    tokens: any[];
    tableDataSource: MatTableDataSource<any[]>;
    streamClient: HyperionStreamClient;
    streamClientStatus: boolean;
    libNum: any;
    private server;
    private verificationLoop;
    private predictionLoop;
    private pendingSet;
    loaded: boolean;
    streamClientLoaded: boolean;
    constructor(httpClient: HttpClient, pagService: PaginationService);
    monitorLib(): Promise<void>;
    checkIrreversibility(): Promise<void>;
    getServerUrl(): void;
    updateLib(): Promise<void>;
    checkLib(): Promise<number>;
    initStreamClient(): Promise<void>;
    setupRequests(): void;
    loadAccountData(accountName: string): Promise<boolean>;
    loadMoreActions(accountName: string): Promise<void>;
    loadTxData(txId: string): Promise<any>;
    loadBlockData(blockNum: number): Promise<any>;
    loadPubKey(key: string): Promise<any>;
    getCreator(accountName: string): Promise<AccountCreationData>;
    toggleStreaming(): void;
    clearLoops(): void;
    disconnectStream(): void;
}
